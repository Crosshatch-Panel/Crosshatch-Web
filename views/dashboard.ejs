<head>
    <title>Dashboard - Crosshatch</title>
    <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.11.4/css/jquery.dataTables.min.css">
    <script src="//code.jquery.com/jquery-3.5.1.js"></script>
    <script src="//cdn.datatables.net/1.11.4/js/jquery.dataTables.min.js"></script>
</head>

<h1>Welcome to the dashboard.</h1>

<button onclick="start()">Start All Containers</button>

<button onclick="stop()">Stop All Containers</button>

<button onclick="kill()">Kill All Containers</button>
<br></br>

<table id="containers" class="display" style="width:100%">
    <thead>
        <tr>
            <th>Name</th>
            <th>Image</th>
            <th>State</th>
            <th>Uptime</th>
            <th>ID</th>
            <th></th>
        </tr>
    </thead>
</table>

<script>
    const table = new DataTable('#containers', {
    "ajax": "/dashboard/ajax",
    responsive: true,
    "columns": [{
        "data": "Name"
    },
    {
        "data": "Image"
    },
    {
        "data": "State"
    },
    {
        "data": "Status"
    },
    {
        "data": "Id"
    },
    {
        "data": "Id"
    },
    ],
    "oLanguage": {
        "sEmptyTable": "There are no officers on duty.",
    },
    'fnRowCallback': function (row, data, index) {
        $(row).find('td:eq(5)').html(
            '<button class="" onclick="window.location.href = `/dashboard/container/'+data.Node+'/'+data.Id+'`;">View Container</button>'
        );
    },
})

function reloadAjax() {
    table.ajax.reload(null, false);
    setTimeout(reloadAjax, 2000);
}
reloadAjax();
</script>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    async function start() {
        const res = await fetch("/dashboard/container/all/actions/start", { method: "POST", credentials: "same-origin" });
        const response = await res.json();
        if (response.status === 'STARTED') {
            Swal.fire({
                title: 'Success',
                text: 'The startup signal has been sent to all contianers. Please give them a minute to boot. This could take a long time depending on how many nodes you have added.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the startup signal to the containers! Please try again later.',
            })
        }
    }
</script>

<script>
    async function stop() {
        const res = await fetch("/dashboard/container/all/actions/stop", { method: "POST", credentials: "same-origin" });
        const response = await res.json();
        if (response.status === 'STOPPED') {
            Swal.fire({
                title: 'Success',
                text: 'The stop signal has been sent to all contianers. Please give them a minute to shutdown. This could take a long time depending on how many nodes you have added.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the stop signal to the containers! Please try again later.',
            })
        }
    }
</script>

<script>
    async function kill() {
        const res = await fetch("/dashboard/container/all/actions/kill", { method: "POST", credentials: "same-origin" });
        const response = await res.json();
        if (response.status === 'KILLED') {
            Swal.fire({
                title: 'Success',
                text: 'The kill signal has been sent to all contianers. Please give them a minute to shutdown. This could take a long time depending on how many nodes you have added.',
                icon: 'success'
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Uh Oh!',
                text: 'Something went wrong when sending the kill signal to the containers! Please try again later.',
            })
        }
    }
</script>

<style>
    body {
        font-family: "Open Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif;
    }
</style>